services:
  frontend:
    image: sarpong4/frontend
    build:
      context: ../frontend
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
    ports:
      - 4200:80

  gateway-srv:
    image: sarpong4/gateway-srv
    build:
      context: ../GatewayService
      dockerfile: Dockerfile
    ports:
      - 8080:80
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:80
      - Jwt__Secret=3cfa76ef14937c1c0ea519f8fc057a80fcd04a7420f8e8bcd0a7567c272e007b
      - Jwt__Issuer=http://joetradingsystem.com
      - Jwt__Audience=joetradingsystem

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      # - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    restart: unless-stopped
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  user-srv:
    image: sarpong4/user-srv
    build:
      context: ../
      dockerfile: UserManagement/Dockerfile
    environment:
      - DB_URL=jdbc:postgresql://user-srv-db:5432/joetrading
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=3cfa76ef14937c1c0ea519f8fc057a80fcd04a7420f8e8bcd0a7567c272e007b
      - SERVER_PORT=80
      - NATS_URL=nats://nats:4222
    depends_on:
      - user-srv-db
      - nats
    ports:
      - 8081:80

  user-srv-db:
    image: postgres:16
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: joetrading
    restart: unless-stopped
    volumes:
      - user_data:/var/lib/postgresql/data

  order-srv:
    image: sarpong4/order-srv
    build:
      context: ../
      dockerfile: OrderProcessingService/Dockerfile
    environment:
      - DB_URL=jdbc:postgresql://order-srv-db:5432/joetrading
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - SERVER_PORT=80
      - API_KEY=$API_KEY
      - REDIS_HOST=order-srv-cache
      - REDIS_PORT=6379
    depends_on:
      - order-srv-db
    ports:
      - 8082:80

  order-srv-db:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: joetrading
    restart: unless-stopped
    volumes:
      - order_data:/var/lib/postgresql/data

  order-srv-cache:
    image: redis:alpine
    # ports:
    #   - 6379:6379

  report-srv:
    image: sarpong4/report-srv
    build:
      context: ../
      dockerfile: ReportService/Dockerfile
    environment:
      - DB_URL=jdbc:postgresql://report-srv-db:5432/joetrading
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - SERVER_PORT=80
    depends_on:
      - report-srv-db
    ports:
      - 8083:80

  report-srv-db:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: joetrading
    restart: unless-stopped
    volumes:
      - report_data:/var/lib/postgresql/data

  market-srv:
    image: sarpong4/market-srv
    build:
      context: ../
      dockerfile: MarketDataService/Dockerfile
    environment:
      - DB_URL=jdbc:postgresql://order-srv-db:5432/joetrading
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - SERVER_PORT=80
      - NATS_URL=nats://nats:4222
      - REDIS_HOST=market-srv-cache
    depends_on:
      - nats
      - market-srv-cache
    ports:
      - 8084:80

  market-srv-cache:
    image: redis:alpine
    # ports:
    #   - 6379:6379

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources

  nats:
    image: nats
    ports:
      - 4222:4222

  # nats-ui:
  #   image: sphqxe/nats-webui
  #   ports:
  #     - 8081:80

volumes:
  rabbitmq_data:
  user_data:
  order_data:
  prom_data:
  report_data:
